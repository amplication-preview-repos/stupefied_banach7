/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, EventData as PrismaEventData } from "@prisma/client";

export class EventDataServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EventDataCountArgs, "select">
  ): Promise<number> {
    return this.prisma.eventData.count(args);
  }

  async eventDataItems(
    args: Prisma.EventDataFindManyArgs
  ): Promise<PrismaEventData[]> {
    return this.prisma.eventData.findMany(args);
  }
  async eventData(
    args: Prisma.EventDataFindUniqueArgs
  ): Promise<PrismaEventData | null> {
    return this.prisma.eventData.findUnique(args);
  }
  async createEventData(
    args: Prisma.EventDataCreateArgs
  ): Promise<PrismaEventData> {
    return this.prisma.eventData.create(args);
  }
  async updateEventData(
    args: Prisma.EventDataUpdateArgs
  ): Promise<PrismaEventData> {
    return this.prisma.eventData.update(args);
  }
  async deleteEventData(
    args: Prisma.EventDataDeleteArgs
  ): Promise<PrismaEventData> {
    return this.prisma.eventData.delete(args);
  }
}
